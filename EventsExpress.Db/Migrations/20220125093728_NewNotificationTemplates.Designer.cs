// <auto-generated />
using System;
using EventsExpress.Db.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;

#nullable disable

namespace EventsExpress.Db.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220125093728_NewNotificationTemplates")]
    partial class NewNotificationTemplates
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EventsExpress.Db.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.AccountRole", b =>
                {
                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("RoleId")
                        .HasColumnType("smallint");

                    b.HasKey("AccountId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AccountRoles");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.AuthExternal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("AuthExternal");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.AuthLocal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salt")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("AuthLocal");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryGroupId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.CategoryGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CategoryGroups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("88b791a5-6ce3-4b50-80ae-65572991f676"),
                            Title = "Art&Craft"
                        },
                        new
                        {
                            Id = new Guid("d11d77e5-818d-41b4-affd-780a1991a16c"),
                            Title = "Education&Training"
                        },
                        new
                        {
                            Id = new Guid("78ed6ee2-9d5a-4802-aced-b3284e948a83"),
                            Title = "Wellness, Health&Fitness"
                        });
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.CategoryOfMeasuring", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CategoriesOfMeasurings");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.ChangeInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ChangesType")
                        .HasColumnType("int");

                    b.Property<string>("EntityKeys")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PropertyChangesText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ChangeInfos");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.ChatRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ChatRoom");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.Comments", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CommentsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CommentsId");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.ContactAdmin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AssigneeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResolutionDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Subject")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AssigneeId");

                    b.HasIndex("SenderId");

                    b.ToTable("ContactAdmin");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateFrom")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EventAudienceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EventLocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<int?>("MaxParticipants")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(2147483647);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventAudienceId");

                    b.HasIndex("EventLocationId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.EventAudience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsOnlyForAdults")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("EventAudiences");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.EventCategory", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EventId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("EventCategory");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.EventLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OnlineMeeting")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Point>("Point")
                        .HasColumnType("geography");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("EventLocations");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.EventOwner", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "EventId");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId", "EventId");

                    b.ToTable("EventOwners");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.EventSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Frequency")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastRun")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NextRun")
                        .HasColumnType("datetime2");

                    b.Property<int>("Periodicity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .IsUnique();

                    b.ToTable("EventSchedules");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.EventStatusHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("EventStatus")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("EventStatusHistory");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.Inventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ItemName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("NeedQuantity")
                        .HasColumnType("float");

                    b.Property<Guid>("UnitOfMeasuringId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UnitOfMeasuringId");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChatRoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Edited")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Seen")
                        .HasColumnType("bit");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChatRoomId");

                    b.HasIndex("ParentId");

                    b.HasIndex("SenderId");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.NotificationTemplate", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("NotificationTemplates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Message = "Dear {{UserEmail}}, your account was blocked for some reason!",
                            Subject = "Your account was blocked",
                            Title = "BlockedUser"
                        },
                        new
                        {
                            Id = 2,
                            Message = "Follow the <a href='{{EventScheduleLink}}'>link</a> to create the recurrent event.",
                            Subject = "Approve your recurrent event!",
                            Title = "CreateEventVerification"
                        },
                        new
                        {
                            Id = 3,
                            Message = "The <a href='{{EventLink}}'>event</a> was created which could interested you.",
                            Subject = "New event for you!",
                            Title = "EventCreated"
                        },
                        new
                        {
                            Id = 4,
                            Message = "Dear {{UserEmail}}, the event you have been joined was CANCELED. The reason is: {{Reason}} \"<a href='{{EventLink}}'>{{Title}}</a>\"",
                            Subject = "The event you have been joined was canceled",
                            Title = "EventStatusCanceled"
                        },
                        new
                        {
                            Id = 5,
                            Message = "Dear {{UserEmail}}, the event you have been joined was BLOCKED. The reason is: {{Reason}} \"<a href='{{EventLink}}'>{{Title}}</a>\"",
                            Subject = "The event you have been joined was blocked",
                            Title = "EventStatusBlocked"
                        },
                        new
                        {
                            Id = 6,
                            Message = "Dear {{UserEmail}}, the event you have been joined was ACTIVATED. The reason is: {{Reason}} \"<a href='{{EventLink}}'>{{Title}}</a>\"",
                            Subject = "The event you have been joined was activated",
                            Title = "EventStatusActivated"
                        },
                        new
                        {
                            Id = 7,
                            Message = "Dear {{UserEmail}}, you have been approved to join to this event. To check it, please, visit \"<a href='{{EventLink}}'>EventExpress</a>\"",
                            Subject = "Approving participation",
                            Title = "ParticipationApproved"
                        },
                        new
                        {
                            Id = 8,
                            Message = "Dear {{UserEmail}}, you have been denied to join to this event. To check it, please, visit \"<a href='{{EventLink}}'>EventExpress</a>\"",
                            Subject = "Denying participation",
                            Title = "ParticipationDenied"
                        },
                        new
                        {
                            Id = 9,
                            Message = "For confirm your email please follow the <a href='{{EmailLink}}'>link</a>",
                            Subject = "EventExpress registration",
                            Title = "RegisterVerification"
                        },
                        new
                        {
                            Id = 10,
                            Message = "Dear {{UserEmail}}, congratulations, your account was Unblocked, so you can come back and enjoy spending your time in EventsExpress",
                            Subject = "Your account was Unblocked",
                            Title = "UnblockedUser"
                        },
                        new
                        {
                            Id = 11,
                            Message = "Dear {{UserEmail}}, your event has been changed.",
                            Subject = "Your event was changed",
                            Title = "OwnEventChanged"
                        },
                        new
                        {
                            Id = 12,
                            Message = "Dear {{UserEmail}}, your joined event has been changed.",
                            Subject = "Joined event was changed",
                            Title = "JoinedEventChanged"
                        });
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.NotificationType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NotificationTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "User Status Change"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Own Event Change"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Joined Event Change"
                        });
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.Rate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Score")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("UserFromId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserFromId");

                    b.ToTable("Rates");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.Relationship", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Attitude")
                        .HasColumnType("int");

                    b.Property<Guid>("UserFromId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserToId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserFromId");

                    b.HasIndex("UserToId");

                    b.ToTable("Relationships");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.Role", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = (short)0,
                            Name = "User"
                        },
                        new
                        {
                            Id = (short)1,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.UnitOfMeasuring", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UnitName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UnitName", "ShortName", "CategoryId")
                        .IsUnique()
                        .HasFilter("IsDeleted = 0");

                    b.ToTable("UnitOfMeasurings");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Gender")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.UserCategory", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("UserCategory");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.UserChat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("UserChat");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.UserEvent", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserStatusEvent")
                        .HasColumnType("int");

                    b.HasKey("UserId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("UserEvent");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.UserEventInventory", b =>
                {
                    b.Property<Guid>("InventoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.HasKey("InventoryId", "UserId", "EventId");

                    b.HasIndex("UserId", "EventId");

                    b.ToTable("UserEventInventories");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.UserNotificationType", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NotificationTypeId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "NotificationTypeId");

                    b.HasIndex("NotificationTypeId");

                    b.ToTable("UserNotificationTypes");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.UserToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime2");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.Account", b =>
                {
                    b.HasOne("EventsExpress.Db.Entities.User", "User")
                        .WithOne("Account")
                        .HasForeignKey("EventsExpress.Db.Entities.Account", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.AccountRole", b =>
                {
                    b.HasOne("EventsExpress.Db.Entities.Account", "Account")
                        .WithMany("AccountRoles")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventsExpress.Db.Entities.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.AuthExternal", b =>
                {
                    b.HasOne("EventsExpress.Db.Entities.Account", "Account")
                        .WithMany("AuthExternal")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.AuthLocal", b =>
                {
                    b.HasOne("EventsExpress.Db.Entities.Account", "Account")
                        .WithOne("AuthLocal")
                        .HasForeignKey("EventsExpress.Db.Entities.AuthLocal", "AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.Category", b =>
                {
                    b.HasOne("EventsExpress.Db.Entities.CategoryGroup", "CategoryGroup")
                        .WithMany("Categories")
                        .HasForeignKey("CategoryGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryGroup");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.ChangeInfo", b =>
                {
                    b.HasOne("EventsExpress.Db.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.Comments", b =>
                {
                    b.HasOne("EventsExpress.Db.Entities.Comments", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("CommentsId");

                    b.HasOne("EventsExpress.Db.Entities.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventsExpress.Db.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Parent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.ContactAdmin", b =>
                {
                    b.HasOne("EventsExpress.Db.Entities.User", "Assignee")
                        .WithMany()
                        .HasForeignKey("AssigneeId");

                    b.HasOne("EventsExpress.Db.Entities.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId");

                    b.Navigation("Assignee");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.Event", b =>
                {
                    b.HasOne("EventsExpress.Db.Entities.EventAudience", "EventAudience")
                        .WithMany()
                        .HasForeignKey("EventAudienceId");

                    b.HasOne("EventsExpress.Db.Entities.EventLocation", "EventLocation")
                        .WithMany()
                        .HasForeignKey("EventLocationId");

                    b.Navigation("EventAudience");

                    b.Navigation("EventLocation");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.EventCategory", b =>
                {
                    b.HasOne("EventsExpress.Db.Entities.Category", "Category")
                        .WithMany("Events")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventsExpress.Db.Entities.Event", "Event")
                        .WithMany("Categories")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.EventOwner", b =>
                {
                    b.HasOne("EventsExpress.Db.Entities.Event", "Event")
                        .WithMany("Owners")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventsExpress.Db.Entities.User", "User")
                        .WithMany("Events")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.EventSchedule", b =>
                {
                    b.HasOne("EventsExpress.Db.Entities.Event", "Event")
                        .WithOne("EventSchedule")
                        .HasForeignKey("EventsExpress.Db.Entities.EventSchedule", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.EventStatusHistory", b =>
                {
                    b.HasOne("EventsExpress.Db.Entities.Event", "Event")
                        .WithMany("StatusHistory")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventsExpress.Db.Entities.User", "User")
                        .WithMany("ChangedStatusEvents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.Inventory", b =>
                {
                    b.HasOne("EventsExpress.Db.Entities.Event", "Event")
                        .WithMany("Inventories")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EventsExpress.Db.Entities.UnitOfMeasuring", "UnitOfMeasuring")
                        .WithMany("Inventories")
                        .HasForeignKey("UnitOfMeasuringId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("UnitOfMeasuring");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.Message", b =>
                {
                    b.HasOne("EventsExpress.Db.Entities.ChatRoom", null)
                        .WithMany("Messages")
                        .HasForeignKey("ChatRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventsExpress.Db.Entities.Message", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.HasOne("EventsExpress.Db.Entities.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.Rate", b =>
                {
                    b.HasOne("EventsExpress.Db.Entities.Event", "Event")
                        .WithMany("Rates")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EventsExpress.Db.Entities.User", "UserFrom")
                        .WithMany("Rates")
                        .HasForeignKey("UserFromId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("UserFrom");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.Relationship", b =>
                {
                    b.HasOne("EventsExpress.Db.Entities.User", "UserFrom")
                        .WithMany()
                        .HasForeignKey("UserFromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventsExpress.Db.Entities.User", "UserTo")
                        .WithMany("Relationships")
                        .HasForeignKey("UserToId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserFrom");

                    b.Navigation("UserTo");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.UnitOfMeasuring", b =>
                {
                    b.HasOne("EventsExpress.Db.Entities.CategoryOfMeasuring", "Category")
                        .WithMany("UnitOfMeasurings")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.UserCategory", b =>
                {
                    b.HasOne("EventsExpress.Db.Entities.Category", "Category")
                        .WithMany("Users")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventsExpress.Db.Entities.User", "User")
                        .WithMany("Categories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.UserChat", b =>
                {
                    b.HasOne("EventsExpress.Db.Entities.ChatRoom", "Chat")
                        .WithMany("Users")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventsExpress.Db.Entities.User", "User")
                        .WithMany("Chats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.UserEvent", b =>
                {
                    b.HasOne("EventsExpress.Db.Entities.Event", "Event")
                        .WithMany("Visitors")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventsExpress.Db.Entities.User", "User")
                        .WithMany("EventsToVisit")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.UserEventInventory", b =>
                {
                    b.HasOne("EventsExpress.Db.Entities.Inventory", "Inventory")
                        .WithMany("UserEventInventories")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EventsExpress.Db.Entities.UserEvent", "UserEvent")
                        .WithMany("Inventories")
                        .HasForeignKey("UserId", "EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("UserEvent");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.UserNotificationType", b =>
                {
                    b.HasOne("EventsExpress.Db.Entities.NotificationType", "NotificationType")
                        .WithMany("Users")
                        .HasForeignKey("NotificationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventsExpress.Db.Entities.User", "User")
                        .WithMany("NotificationTypes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NotificationType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.UserToken", b =>
                {
                    b.HasOne("EventsExpress.Db.Entities.Account", "Account")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.Account", b =>
                {
                    b.Navigation("AccountRoles");

                    b.Navigation("AuthExternal");

                    b.Navigation("AuthLocal");

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.Category", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.CategoryGroup", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.CategoryOfMeasuring", b =>
                {
                    b.Navigation("UnitOfMeasurings");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.ChatRoom", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.Comments", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.Event", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("EventSchedule");

                    b.Navigation("Inventories");

                    b.Navigation("Owners");

                    b.Navigation("Rates");

                    b.Navigation("StatusHistory");

                    b.Navigation("Visitors");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.Inventory", b =>
                {
                    b.Navigation("UserEventInventories");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.NotificationType", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.UnitOfMeasuring", b =>
                {
                    b.Navigation("Inventories");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.User", b =>
                {
                    b.Navigation("Account");

                    b.Navigation("Categories");

                    b.Navigation("ChangedStatusEvents");

                    b.Navigation("Chats");

                    b.Navigation("Events");

                    b.Navigation("EventsToVisit");

                    b.Navigation("NotificationTypes");

                    b.Navigation("Rates");

                    b.Navigation("Relationships");
                });

            modelBuilder.Entity("EventsExpress.Db.Entities.UserEvent", b =>
                {
                    b.Navigation("Inventories");
                });
#pragma warning restore 612, 618
        }
    }
}
