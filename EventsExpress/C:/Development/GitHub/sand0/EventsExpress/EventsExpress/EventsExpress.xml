<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EventsExpress</name>
    </assembly>
    <members>
        <member name="M:EventsExpress.Controllers.AuthenticationController.Login(EventsExpress.DTO.LoginDto)">
            <summary>
            This method allows to log in to the API and generate an authentication token.
            </summary>
            <param name="authRequest">Required</param>
            <returns>UserInfo model</returns>
            <response code="200">Return UserInfo model</response>
            <response code="400">If login process failed</response>
        </member>
        <member name="M:EventsExpress.Controllers.AuthenticationController.FacebookLogin(EventsExpress.DTO.UserView)">
            <summary>
            This method is to login with facebook account
            </summary>
            <param name="userView"></param>
            <returns></returns>
            /// <response code="200">Return UserInfo model</response>
            <response code="400">If login process failed</response>
        </member>
        <member name="M:EventsExpress.Controllers.AuthenticationController.Google(EventsExpress.DTO.UserView)">
            <summary>
            This method is to login with google account
            </summary>
            <param name="userView"></param>
            <returns></returns>
            /// <response code="200">Return UserInfo model</response>
            <response code="400">If login process failed</response>
        </member>
        <member name="M:EventsExpress.Controllers.AuthenticationController.Login">
            <summary>
            This method to refresh user status using only jwt access token
            </summary>
            <returns>UserInfo model</returns>
            <response code="200">Return UserInfo model</response>
            <response code="401">If token is invalid</response>
        </member>
        <member name="M:EventsExpress.Controllers.AuthenticationController.Register(EventsExpress.DTO.LoginDto)">
            <summary>
            This method allows register user
            </summary>
            <param name="authRequest">Required</param>
            <returns></returns>
            <response code="200">Register valid</response> 
            <response code="400">If register process failed</response>
        </member>
        <member name="M:EventsExpress.Controllers.AuthenticationController.PasswordRecovery(System.String)">
            <summary>
            This method is for password recovery
            </summary>
            <param name="email">Required</param>
            <returns></returns>
            <response code="200">Password recovery succesful</response> 
            <response code="400">If password recover process failed</response>
        </member>
        <member name="M:EventsExpress.Controllers.AuthenticationController.EmailConfirm(System.String,System.String)">
            <summary>
            This method is for email confirmation
            </summary>
            <param name="userid">Required</param>
            <param name="token">Required</param>
            <returns>Return UserInfo model</returns>
            <response code="200">Return UserInfo model</response> 
            <response code="400">If emeil confirm process failed</response>
        </member>
        <member name="M:EventsExpress.Controllers.AuthenticationController.ChangePassword(EventsExpress.DTO.ChangePasswordDto)">
            <summary>
            This method is for change password
            </summary>
            <param name="changePasswordDto">Required</param>
            <returns></returns>
            <response code="200">Password change succesful</response> 
            <response code="400">If assword change process failed</response>
        </member>
        <member name="M:EventsExpress.Controllers.CategoryController.All">
            <summary>
            This method have to return all categories
            </summary>
            <returns>CategoryDto model</returns>
            <response code="200">Return IEnumerable CategoryDto model</response>
        </member>
        <member name="M:EventsExpress.Controllers.CategoryController.Edit(EventsExpress.DTO.CategoryDto)">
            <summary>
            This method is for edit and create categories
            </summary>
            <param name="model">Required</param>
            <returns></returns>
            <response code="200">Edit/Create category proces success</response>
            <response code="400">If Edit/Create process failed</response>
        </member>
        <member name="M:EventsExpress.Controllers.CategoryController.Delete(System.Guid)">
            <summary>
            This method is for delete category
            </summary>
            <param name="id">Required</param>
            <returns></returns>
            <response code="200">Delete category proces success</response>
            <response code="400">If delete process failed</response> 
        </member>
        <member name="M:EventsExpress.Controllers.ChatController.GetAllChats">
            <summary>
            This method have to return all chats
            </summary>
            <returns>UserChatDto model</returns>
            <response code="200">UserChatDto model</response>
            <response code="200">If proccess is failed</response>
        </member>
        <member name="M:EventsExpress.Controllers.ChatController.GetChat(System.Guid)">
            <summary>
            This method have to return chat
            </summary>
            <param name="chatId">Required</param>
            <returns></returns>
            <response code="200">UserChatDto model</response>
            <response code="200">If proccess is failed</response>
        </member>
        <member name="M:EventsExpress.Controllers.ChatController.GetUnreadMessages(System.Guid)">
            <summary>
            This method is to get mesagees which are unread
            </summary>
            <param name="userId"></param>
            <returns></returns>
            /// <returns></returns>
            <response code="200">MessageDto model</response>
            <response code="200">If proccess is failed</response>
        </member>
        <member name="M:EventsExpress.Controllers.CommentController.Edit(EventsExpress.DTO.CommentDto)">
            <summary>
            This method is for edit and create comments
            </summary>
            <param name="model">Required</param>
            <returns></returns>
            <response code="200">Edit/Create comment proces success</response>
            <response code="400">If Edit/Create process failed</response>
        </member>
        <member name="M:EventsExpress.Controllers.CommentController.Delete(System.Guid)">
            <summary>
            This method is for delete comment
            </summary>
            <param name="id">Required</param>
            <returns></returns>
            <response code="200">Delete comment proces success</response>
            <response code="400">If delete process failed</response> 
        </member>
        <member name="M:EventsExpress.Controllers.CommentController.All(System.Guid,System.Int32)">
            <summary>
            This method have to return all comments
            </summary>
            <param name="id">Required</param>
            <param name="page">Required</param>
            <returns></returns>
            <response code="200">Return CommentDto model</response>
        </member>
        <member name="M:EventsExpress.Controllers.EventController.Edit(EventsExpress.DTO.EventDto)">
            <summary>
            This method is for edit and create events
            </summary>
            <param name="model">Required</param>
            <returns></returns>
            <response code="200">Edit/Create event proces success</response>
            <response code="400">If Edit/Create process failed</response> 
        </member>
        <member name="M:EventsExpress.Controllers.EventController.Get(System.Guid)">
            <summary>
            This method have to return event
            </summary>
            <param name="id">Required</param>
            <returns></returns>
            <response code="200">Return UserInfo model</response>
        </member>
        <member name="M:EventsExpress.Controllers.EventController.All(EventsExpress.Core.EventFilterViewModel)">
            <summary>
            This method have to return all events
            </summary>
            <param name="filter">Required</param>
            <returns></returns>
            <response code="200">Return IEnumerable EventPreviewDto</response>
            <response code="400">If return failed</response>       
        </member>
        <member name="M:EventsExpress.Controllers.EventController.AllForAdmin(EventsExpress.Core.EventFilterViewModel)">
            <summary>
            This method have to return all events fro Admin
            </summary>
            <param name="filter">Required</param>
            <returns></returns>
            <response code="200">Return IEnumerable EventPreviewDto</response>
            <response code="400">If return failed</response>  
        </member>
        <member name="M:EventsExpress.Controllers.EventController.AddUserToEvent(System.Guid,System.Guid)">
            <summary>
            This method have to add user to category
            </summary>
            <param name="userId">Required</param>
            <param name="eventId">Required</param>
            <returns></returns>
            <response code="200">Adding user from event proces success</response>
            <response code="400">If adding user from event process failed</response>        
        </member>
        <member name="M:EventsExpress.Controllers.EventController.DeleteUserFromEvent(System.Guid,System.Guid)">
            <summary>
            This method have to add user to category
            </summary>
            <param name="userId">Required</param>
            <param name="eventId">Required</param>
            <returns></returns>
            <response code="200">Delete  user from event proces success</response>
            <response code="400">If deleting user from event process failed</response>
        </member>
        <member name="M:EventsExpress.Controllers.EventController.Block(System.Guid)">
            <summary>
            This method is to block event
            </summary>
            <param name="eventId">Required</param>
            <returns></returns>
            <response code="200">Block is succesful</response>
            <response code="302">If user isn't admin</response>
            <response code="400">Block process failed</response>
        </member>
        <member name="M:EventsExpress.Controllers.EventController.Unblock(System.Guid)">
            <summary>
            This method is to unblock event
            </summary>
            <param name="eventId">Required</param>
            <returns></returns>
            <response code="200">Unblock is succesful</response>
            <response code="400">Unblock process is failed</response>
        </member>
        <member name="M:EventsExpress.Controllers.EventController.SetRate(EventsExpress.DTO.RateDto)">
            <summary>
            This method id used to set rating to user
            </summary>
            <param name="model">Required (type: RateDto)</param>
            <returns></returns>
            <response code="200">Rating is setted successfully</response>
            <response code="400">Setting rating is failed</response>
        </member>
        <member name="M:EventsExpress.Controllers.EventController.GetCurrentRate(System.Guid)">
            <summary>
            This method gets current rate for event
            </summary>
            <param name="eventId">Required (type: Guid)</param>
            <returns></returns>
            <response code="200">Getting is successful</response>
            <response code="400">Getting is failed</response>
        </member>
        <member name="M:EventsExpress.Controllers.EventController.GetAverageRate(System.Guid)">
            <summary>
            This method gets average rate for event 
            </summary>
            <param name="eventId">Reguired (type: Guid)</param>
            <returns></returns>
            <response code="200">Getting is successful</response>
            <response code="400">Getting is failed</response>
        </member>
        <member name="M:EventsExpress.Controllers.EventController.FutureEvents(System.Guid,System.Int32)">
            <summary>
            This method gets future events for user profile
            </summary>
            <param name="id">Reguired</param>
            <param name="page">Reguired</param>
            <returns></returns>
            <response code="200">Getting is successful</response>
            <response code="400">Getting is failed</response>
        </member>
        <member name="M:EventsExpress.Controllers.EventController.PastEvents(System.Guid,System.Int32)">
            <summary>
            This method gets finished events
            </summary>
            <param name="id">Reguired</param>
            <param name="page">Reguired</param>
            <returns></returns>
            <response code="200">Getting is successful</response>
            <response code="400">Getting is failed</response> 
        </member>
        <member name="M:EventsExpress.Controllers.EventController.EventsToGo(System.Guid,System.Int32)">
            <summary>
            This method gets  events which have to visit
            </summary>
            <param name="id">Reguired</param>
            <param name="page">Reguired</param>
            <returns></returns>
            <response code="200">Getting is successful</response>
            <response code="400">Getting is failed</response> 
        </member>
        <member name="M:EventsExpress.Controllers.EventController.VisitedEvents(System.Guid,System.Int32)">
            <summary>
            This method gets  events which have visited
            </summary>
            <param name="id">Reguired</param>
            <param name="page">Reguired</param>
            <returns></returns>
            <response code="200">Getting is successful</response>
            <response code="400">Getting is failed</response>
        </member>
        <member name="M:EventsExpress.Controllers.EventController.GetEvents(System.Collections.Generic.List{System.Guid},System.Int32)">
            <summary>
            This method gets  events 
            </summary>
            <param name="eventIds">Reguired</param>
            <param name="page">Reguired</param>
            <returns></returns>
            <response code="200">Getting is successful</response>
            <response code="400">Getting is failed</response>
        </member>
        <member name="M:EventsExpress.Controllers.LocationsController.Countries">
            <summary>
            This method have return all countries
            </summary>
            <returns>IEnumerable Countries</returns>
            <response code="200">Return IEnumerable country model</response>
        </member>
        <member name="M:EventsExpress.Controllers.LocationsController.EditCountry(EventsExpress.Db.Entities.Country)">
            <summary>
            This method for edit/create country
            </summary>
            <param name="country">Requiered</param>
            <returns></returns>
            <response code="200">Edit/Create country proces success</response>
            <response code="400">If Edit/Create country failed</response>
        </member>
        <member name="M:EventsExpress.Controllers.LocationsController.DeleteCountry(System.Guid)">
            <summary>
            This method is for delete country
            </summary>
            <param name="id"></param>
            <returns></returns>
            <response code="200">Delete country proces success</response>
            <response code="400">If delete process failed</response>  
        </member>
        <member name="M:EventsExpress.Controllers.LocationsController.Cities(System.Guid)">
            <summary>
            This method have return all cities
            </summary>
            <returns>IEnumerable cities</returns>
            <response code="200">Return IEnumerable city model</response>
        </member>
        <member name="M:EventsExpress.Controllers.LocationsController.EditCity(EventsExpress.Db.Entities.City)">
            <summary>
            This method for edit/create country
            </summary>
            <param name="city">Requiered</param>
            <returns></returns>
            <response code="200">Edit/Create city proces success</response>
            <response code="400">If Edit/Create city failed</response>
        </member>
        <member name="M:EventsExpress.Controllers.LocationsController.DeleteCity(System.Guid)">
            <summary>
            This method is for delete country
            </summary>
            <param name="id"></param>
            <returns></returns>
            <response code="200">Delete city proces success</response>
            <response code="400">If delete process failed</response>  
        </member>
        <member name="M:EventsExpress.Controllers.RolesController.All">
            <summary>
            This method have to return all roles
            </summary>
            <returns></returns>
            <response code="200">Return IEnumerable RoleDto model</response> 
        </member>
        <member name="M:EventsExpress.Controllers.UsersController.SearchUsers(EventsExpress.Core.DTOs.UsersFilterViewModel)">
            <summary>
            This method
            </summary>
            <param name="filter">Required</param>
            <returns></returns>
            <response code="200">Return IEnumerable UserManageDto models</response>
            <response code="400">Return failed</response>
        </member>
        <member name="M:EventsExpress.Controllers.UsersController.Get(EventsExpress.Core.DTOs.UsersFilterViewModel)">
            <summary>
            This metod have to return UserMangeDto
            </summary>
            <param name="filter">Required</param>
            <returns></returns>
            <response code="200">Return  UserManageDto model</response>
            <response code="400">Return failed</response>
        </member>
        <member name="M:EventsExpress.Controllers.UsersController.ChangeRole(System.Guid,System.Guid)">
            <summary>
            This method have to change role of user
            </summary>
            <param name="userId">Required</param>
            <param name="roleId">Required</param>
            <returns></returns>
            <response code="200">Change role success</response>
            <response code="400">Change role failed</response>
        </member>
        <member name="M:EventsExpress.Controllers.UsersController.Unblock(System.Guid)">
            <summary>
            This method is to block user
            </summary>
            <param name="userId">Required</param>
            <returns></returns>
            <response code="200">Block is succesful</response>
            <response code="400">Block process failed</response>
        </member>
        <member name="M:EventsExpress.Controllers.UsersController.Block(System.Guid)">
            <summary>
            This method is to unblock event
            </summary>
            <param name="userId">Required</param>
            <returns></returns>
            <response code="200">Unblock is succesful</response>
            <response code="400">Unblock process failed</response>
        </member>
        <member name="M:EventsExpress.Controllers.UsersController.EditUsername(EventsExpress.DTO.UserInfo)">
            <summary>
            This method is to edit username
            </summary>
            <param name="userInfo">Required</param>
            <returns></returns>
            <response code="200">Edit is succesful</response>
            <response code="400">Edit process failed</response>
        </member>
        <member name="M:EventsExpress.Controllers.UsersController.EditBirthday(EventsExpress.DTO.UserInfo)">
            <summary>
            This method is to edit date of birthday
            </summary>
            <param name="userInfo">Required</param>
            <returns></returns>
            <response code="200">Edit is succesful</response>
            <response code="400">Edit process failed</response>
        </member>
        <member name="M:EventsExpress.Controllers.UsersController.EditGender(EventsExpress.DTO.UserInfo)">
            <summary>
            This method is to edit gender
            </summary>
            <param name="userInfo">Required</param>
            <returns></returns>
            <response code="200">Edit is succesful</response>
            <response code="400">Edit process failed</response>
        </member>
        <member name="M:EventsExpress.Controllers.UsersController.EditUserCategory(EventsExpress.DTO.UserInfo)">
            <summary>
            This method is to edit user categories
            </summary>
            <param name="userInfo">Required</param>
            <returns></returns>
            <response code="200">Edit is succesful</response>
            <response code="400">Edit process failed</response>
        </member>
        <member name="M:EventsExpress.Controllers.UsersController.ChangeAvatar(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            This metod is to change user avatar
            </summary>
            <param name="newAva">Required</param>
            <returns></returns>
            <response code="200">Changing is succesful</response>
            <response code="400">Changing process failed</response>
        </member>
        <member name="M:EventsExpress.Controllers.UsersController.ContactAdmins(EventsExpress.DTO.ContactUsDto)">
            <summary>
            This method help to contact users with admins
            </summary>
            <param name="model"></param>
            <returns></returns>
            <response code="200">Sending is succesfull</response>
            <response code="400">Sending process failed</response>
        </member>
        <member name="M:EventsExpress.Controllers.UsersController.GetUserProfileById(System.Guid)">
            <summary>
            This method is for get user
            </summary>
            <param name="id"></param>
            <returns></returns>
            <response code="200">Return profileDto</response>
            <response code="400">Attitude set failed</response>
        </member>
        <member name="M:EventsExpress.Controllers.UsersController.SetAttitude(EventsExpress.DTO.AttitudeDto)">
            <summary>
            This method is to set attitide t user
            </summary>
            <param name="attitude"></param>
            <returns></returns>
            <response code="200">Attitude set success</response>    
            <response code="400">Attitude set failed</response>
        </member>
        <member name="M:EventsExpress.Controllers.UsersController.GetCurrentUser(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            This method help to get current user from JWT 
            </summary>
            <param name="userClaims"></param>
            <returns></returns>
            <response code="200">Get current uses</response>
        </member>
    </members>
</doc>
