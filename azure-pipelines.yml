name: $(Date:yyyyMMdd)$(Rev:.r)

trigger:
- development
pr:
- development

pool:
  vmImage: 'windows-latest'

stages:
- stage: 'build'
  displayName: 'Build App'
  variables:
    solution: '**/EventsExpress.sln'
    buildPlatform: 'Any CPU'
    buildConfiguration: 'Release'
  
  jobs:
  - job: 'main'
    displayName: 'build & test'
    steps:
    
    - task: SonarCloudPrepare@1
      displayName: 'Prepare analysis on SonarCloud'
      inputs:
        SonarCloud: 'Sonar Cloud Connection'
        organization: 'ita-social-projects'
        projectKey: 'ita-social-projects-events-express'
        projectName: EventsExpress
        scannerMode: MSBuild
        extraProperties: |
          # Exclude some files from analyze
          sonar.cpd.exclusions=**/Migrations/**/*.*
          sonar.coverage.exclusions=**/ClientApp/**/*.*,**/Migrations/**/*.*,**/Startup.cs
          sonar.issue.ignore.multicriteria=e1
          sonar.issue.ignore.multicriteria.e1.ruleKey=javascript:S1788
          sonar.issue.ignore.multicriteria.e1.resourceKey=**/ClientApp/src/reducers/*.js
    
    - task: DotNetCoreCLI@2
      displayName: Restore
      inputs:
        command: 'restore'
        projects: '$(solution)'
    
    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        command: 'build'
        projects: '$(solution)'
        arguments: '--configuration $(buildConfiguration)'
    
    # - task: DotNetCoreCLI@2
    #   displayName: Test
    #   inputs:
    #     command: test
    #     projects: '**/EventsExpress.Test.csproj'
    #     arguments: '--configuration $(buildConfiguration) --collect "Code coverage"'
    
    # - task: SonarCloudAnalyze@1
    #   displayName: 'Run Code Analysis'
    
    # - task: SonarCloudPublish@1
    #   displayName: 'Publish Quality Gate Result'
    
    - task: DotNetCoreCLI@2
      displayName: Publish
      inputs:
        command: publish
        publishWebProjects: True
        arguments: '--configuration $(buildConfiguration) --output "$(Build.artifactstagingdirectory)"'
        zipAfterPublish: True
    
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Artifact'
      inputs:
        targetPath: '$(Build.artifactstagingdirectory)'
        artifactName: 'EventsExpress'
#        condition: ne(variables['Build.Reason'], 'PullRequest')

- stage: 'deploy'
  displayName: 'Deploy Artifacts'
  dependsOn: Build
#  condition: ne(variables['Build.Reason'], 'PullRequest')
  jobs:
  - deployment: 'test'
    displayName: deploy to test
    environment: 'events-express-test'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: 'EventsExpress'
          - task: AzureRmWebAppDeployment@4
            displayName: 'Deploy Azure App Service'
            inputs:
              azureSubscription: 'Visual Studio Enterprise Subscription â€“ MPN (1e23f758-8256-46e3-8ee8-b0bd24fbbc5e)'
              ConnectionType: AzureRM
              appType: webApp
              #Package: '**/drop/EventsExpress.zip'
              WebAppName: 'eventsexpress-test'
              enableCustomDeployment: true
              ExcludeFilesFromAppDataFlag: false
